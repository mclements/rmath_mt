#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <style type="text/css">.abstract {max-width: 30em; margin-left: auto; margin-right: auto;}</style>

#+OPTIONS: H:3 num:nil html-postamble:nil

#+title: =rmath_mt=: C library to use the standalone Rmath library with the Mersenne Twister random number generator

* Summary

The standalone =Rmath= library provides a built-in Marsaglia-multicarry uniform random number generator and a number of non-uniform random number functions. This small =C= library demonstrates using the =Rmath= library with a Mersenne Twister (MT) random number generator and with initial values as per =R=. 

The =r_set_seed(unsigned int)= function can be called to set the initial values for the MT generator, where the argument is as per the =set.seed(n)= function in =R=.

Linking requires over-writing the functions =void set_seed(unsigned int, unsigned int)= (ignoring the second argument)  and =double unif_rand(void)=, which are both defined in =Rmath.h=. This requires using the static library =libRmath.a= rather than a shared library (e.g. =libRmath.so=).

* Test

#+BEGIN_SRC emacs-lisp :results silent :exports none
(org-babel-do-load-languages
 'org-babel-load-languages
 '((C . t)
   (R . t)
   (sh . t)
   (emacs-lisp . t)))
#+END_SRC

The file =test.c= is:

#+BEGIN_SRC sh :results output :exports results
cat test.c
#+END_SRC

#+RESULTS:
#+begin_example
#include "mt_unif_rand.h"

void printLn(double x) {
  printf("%f\n", x);
}

int main() {
  printLn(unif_rand());
  set_seed(1234,5678);
  printLn(runif(0.0, 1.0));
  printLn(runif(0.0, 1.0));
  printLn(pnorm(1.96, 0, 1, 1, 0));
  // printLn(dwilcox(100, 10, 20, 0));
  return 0;
}
#+end_example

We can compile and run this using:

#+BEGIN_SRC sh :results output :exports both
  gcc --static -o test test.c mt_unif_rand.c -lRmath -lm
  ./test
#+END_SRC

#+RESULTS:
: 0.113703
: 0.113703
: 0.622299
: 0.975002


This shows that the default seed is 1234, whereas in =R= the default seed is random. We can run equivalent code in =R=:

#+BEGIN_SRC R :exports both :results output
set.seed(1234)
print(runif(1))
set.seed(1234)
print(runif(2))
print(pnorm(1.96))
#+END_SRC

#+RESULTS:
: [1] 0.1137034
: [1] 0.1137034 0.6222994
: [1] 0.9750021
